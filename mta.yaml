_schema-version: "3.1"
ID: classic-schema-sharing
version: 1.0.0
description: "Cross Schema sharing in SAP CAP"
parameters:
  enable-parallel-deployments: true
build-parameters:
  before-all:
    - builder: custom
      commands:
        - npm i
        - npx cds build --production
        - npx tsc 
        - cp -r @cds-models gen/srv
modules:
  - name: classic-schema-sharing-srv
    type: nodejs
    path: gen/srv
    parameters:
      buildpack: nodejs_buildpack
      readiness-health-check-type: http
      readiness-health-check-http-endpoint: /health
    build-parameters:
      builder: npm
    provides:
      - name: srv-api # required by consumers of CAP services (e.g. approuter)
        properties:
          srv-url: ${default-url}
    requires:
      - name: classic-schema-sharing-db
      - name: classic-schema-sharing-auth

  - name: classic-schema-sharing-db-deployer
    type: hdb
    path: gen/db
    parameters:
      buildpack: nodejs_buildpack
    requires:
      - name: classic-schema-sharing-db
      - name: cross-container-service-1
        group: SERVICE_REPLACEMENTS
        properties:
          key: ServiceName_1 # Will be used inside plain.hdbgrants
          service: ~{the-service-name}

resources:
  - name: classic-schema-sharing-db
    type: com.sap.xs.hdi-container
    parameters:
      service: hana
      service-plan: hdi-shared
      config:
        # use custom schema name to easily find it inside HANA DB
        schema: CLASSICAL_SCHEMA_SHARING

  - name: classic-schema-sharing-auth
    type: org.cloudfoundry.managed-service
    parameters:
      service: xsuaa
      service-plan: application
      path: ./xs-security.json
      config:
        xsappname: classic-schema-sharing-${org}-${space}
        tenant-mode: dedicated

    # User provided service to enable classic schema access
  - name: cross-container-service-1
    type: org.cloudfoundry.existing-service
    parameters:
      service-name: CC_ACCESS
    properties:
      the-service-name: ${service-name}
